#resources:
#  repositories:
#  - repository: self
#
#variables:
#  CYCLONEDDS_URI: "<CycloneDDS><Domain><Internal><EnableExpensiveChecks>all</EnableExpensiveChecks><LivelinessMonitoring>true</LivelinessMonitoring></Internal><Tracing><Verbosity>config</Verbosity><OutputFile>stderr</OutputFile></Tracing></Domain></CycloneDDS>"
#  COVERAGE: 0
#  COVERITY: 0
#  DEFAULT_COMPILER: 1
#  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
#  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
#  CONAN_NON_INTERACTIVE: 1
#  SSL: YES
#  SECURITY: YES
#  LIFESPAN: YES
#  DEADLINE: YES


# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'



#jobs:
#- job: Linux
#  pool:
#    vmImage: 'ubuntu-18.04'
#  strategy:
#    matrix:
#      Clang 10.0 Debug:
#        CC: clang-10
#        CXX: clang++-10
#        BuildType: Debug
#        USE_SANITIZER: address
#        GENERATOR: "Unix Makefiles"
#       DEFAULT_COMPILER: 0
#      Clang 10.0 Release:
#        CC: clang-10
#        CXX: clang++-10
#        BuildType: Release
#        USE_SANITIZER: none
#        GENERATOR: "Unix Makefiles"
#        DEFAULT_COMPILER: 0
#      GCC 10 Debug:
#        CC: gcc-10
#        CXX: g++-10
#        BuildType: Debug
#        USE_SANITIZER: none
#        GENERATOR: "Unix Makefiles"
#        DEFAULT_COMPILER: 0
#
#      GCC 10 Release:
#        CC: gcc-10
#        CXX: g++-10
#        BuildType: Release
#        USE_SANITIZER: none
#        GENERATOR: "Unix Makefiles"
#        DEFAULT_COMPILER: 0
#
#      GCC 7 Release:
#        CC: gcc
#        CXX: g++
#        BuildType: Release
#        USE_SANITIZER: none
#        GENERATOR: "Unix Makefiles"
#        DEFAULT_COMPILER: 1
#
#  steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '3.7'
#     - bash: |
#         sudo add-apt-repository ppa:ubuntu-toolchain-r/test
#         sudo apt-get update
#         sudo apt-get install -y $(CC) $(CXX)
#       displayName: 'Install a non default compiler'
#       failOnStderr: false
#       condition: eq( variables['DEFAULT_COMPILER'], '0' )
#     - script: |   
#         pip install --upgrade pip
#         pip install scikit-ci-addons
#         pip install conan --upgrade
#         conan profile new default --detect
#         conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
#         mkdir build
#         cd build
#         conan install -b missing -s arch=x86_64 -s build_type=$(BuildType) ..
#       displayName: 'Install Build Dependencies'
#     - template: templates/build_and_test.yml       
#    
#- job: Windows_VS19
#  pool:
#    vmImage: 'windows-2019'
#  strategy:
#    matrix:
#      x86_64 Debug:
#        BuildType: Debug
#        GENERATOR: "Visual Studio 16 2019"
#        ARCH: x86_64
#        USE_SANITIZER: none
#      x86_64 Release:
#        BuildType: Release
#        GENERATOR: "Visual Studio 16 2019"
#        ARCH: x86_64
#        USE_SANITIZER: none
#
#  steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '3.7'
#     - script: |
#         pip install --upgrade pip --user
#         pip install scikit-ci-addons
#         pip install conan --upgrade
#         conan profile new default --detect
#         conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
#         mkdir build
#         cd build
#         conan install -b missing -s arch=$(ARCH) -s build_type=$(BuildType) ..
#       displayName: 'Install Build Dependencies'
#     - template: templates/build_and_test.yml
# 
#- job: Windows_VS17
#  pool:
#    vmImage: 'vs2017-win2016'
#  strategy:
#    matrix:
#      x86 Release:
#        BuildType: Release
#        GENERATOR: "Visual Studio 15 2017"
#        ARCH: x86
#        USE_SANITIZER: none 
#
#      x86_64 Release:
#        BuildType: Release
#        GENERATOR: "Visual Studio 15 2017 Win64"
#        ARCH: x86_64
#        USE_SANITIZER: none
#  
#  steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '3.7'
#    - script: |
#         pip install --upgrade pip --user
#         pip install scikit-ci-addons
#         pip install conan --upgrade
#         conan profile new default --detect
#         conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
#         mkdir build
#         cd build
#         conan install -b missing -s arch=$(ARCH) -s build_type=$(BuildType) ..
#       displayName: 'Install Build Dependencies'
#     - template: templates/build_and_test.yml
# 
#- job: MacOS_10_15
#  pool:
#    vmImage: 'macOS-10.15'
#  strategy:
#    matrix:
#      Debug Xcode 11.0:
#        BuildType: Debug
#        USE_SANITIZER: address
#        GENERATOR: "Unix Makefiles"
#
#      Release Xcode 11.0:
#        BuildType: Release
#        USE_SANITIZER: none
#        GENERATOR: "Unix Makefiles"
#        
#      Release Xcode 11.0 target 10.12:
#        BuildType: Release
#        USE_SANITIZER: none
#        GENERATOR: "Unix Makefiles"
#        MACOSX_DEPLOYMENT_TARGET: "10.12"
#
#  steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '3.7'
#     - script: |
#         sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
#         pip install --upgrade pip
#         pip install scikit-ci-addons
#         pip install conan --upgrade
#         conan profile new default --detect
#         conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
#         mkdir build
#         cd build
#         conan install -b missing -s arch=x86_64 -s build_type=$(BuildType) ..
#       displayName: 'Install Build Dependencies'
#     - template: templates/build_and_test.yml   

